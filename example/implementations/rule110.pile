mem 98 + 1 <|
\ mem 49 + 1 <|

0 while dup 88 < do
  0 while dup 100 < do
    \ Check if the mem at the position is 1
    dup mem + |> if
      dup mem + 100 + 42 <| \ 42 is the ASCII code for '*'
    else
      dup mem + 100 + 32 <| \ 20 is the ASCII code for ' '
    end

    1 +
  end

  mem + 100 + 10 <| \ 10 is the ASCII code for '\n'
  SYS_write 1 mem 100 + 101 syscall3 \ print the buffer with buffer + 1 size

  \ board[0] << 1
  mem 0 + |> 1 << 
  \ ^ | board[1]
  mem 1 + |> |

  1 while dup 99 < do
                       \ pattern index

    swap               \ index pattern
    1 << 7 &           \ index pattern
    over               \ index pattern index
    mem + 1 + |>       \ index pattern board[index+1]
    |                  \ index new_pattern
    dup2               \ index new_pattern index new_pattern
    110                \ index new_pattern index new_pattern 110
    swap >> 1 &        \ index new_pattern index final_pattern
    swap mem + swap <| \ index new_pattern

    swap

    1 +
  end drop drop

  1 +
end drop

\ Exit
SYS_exit 69 syscall1
